const s=()=>({calendar:null,config:{},id:null,calendars:[],activeCalendars:[],calendarEvent:{},dispatchCalendarEvents(t,n){const e=t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase();this.$dispatch(`calendar-${e}`,n)},getCalendarEventSources(){return this.calendars.forEach(t=>{t.events=n=>this.$wire.getEvents(n,t.id),this.activeCalendars.push(t.id)}),this.calendars},toggleEventSource(t){const n=this.calendar.getEventSourceById(t.id);n?n.remove():this.calendar.addEventSource(t)},init(){this.id=this.$id("calendar"),this.$wire.getCalendars().then(t=>{this.calendars=t}),this.$wire.getConfig().then(t=>{this.config=t,this.initCalendar()})},initCalendar(){let t=document.getElementById(this.id),n={plugins:[dayGridPlugin,timeGridPlugin,listPlugin,interactionPlugin],initialView:"dayGridMonth",initialDate:new Date,editable:!0,selectable:!0,selectMirror:!0,dayMaxEvents:!0,eventSources:this.getCalendarEventSources(),select:e=>this.dispatchCalendarEvents("select",e),unselect:(e,a)=>this.dispatchCalendarEvents("unselect",{jsEvent:e,view:a}),dateClick:e=>this.dispatchCalendarEvents("dateClick",e),eventDidMount:e=>this.dispatchCalendarEvents("eventDidMount",e),eventClick:e=>this.dispatchCalendarEvents("eventClick",e),eventMouseEnter:e=>this.dispatchCalendarEvents("eventMouseEnter",e),eventMouseLeave:e=>this.dispatchCalendarEvents("eventMouseLeave",e),eventDragStart:e=>this.dispatchCalendarEvents("eventDragStart",e),eventDragStop:e=>this.dispatchCalendarEvents("eventDragStop",e),eventDrop:e=>this.dispatchCalendarEvents("eventDrop",e),eventResizeStart:e=>this.dispatchCalendarEvents("eventResizeStart",e),eventResizeStop:e=>this.dispatchCalendarEvents("eventResizeStop",e),eventResize:e=>this.dispatchCalendarEvents("eventResize",e),drop:e=>this.dispatchCalendarEvents("drop",e),eventReceive:e=>this.dispatchCalendarEvents("eventReceive",e),eventLeave:e=>this.dispatchCalendarEvents("eventLeave",e),eventAdd:e=>this.dispatchCalendarEvents("eventAdd",e),eventChange:e=>this.dispatchCalendarEvents("eventChange",e),eventRemove:e=>this.dispatchCalendarEvents("eventRemove",e),eventsSet:e=>this.dispatchCalendarEvents("eventsSet",e)};this.calendar=new Calendar(t,{...n,...this.config}),this.$wire.getCalendarEventsBeingListenedFor().then(e=>{e.forEach(a=>{this.calendar.on(a,i=>{this.$wire.emit(a,i)})})}),this.calendar.render()}});export{s as c};
